{
  "name": "grep1",
  "version": "0.0.5",
  "description": "Simple node.js wrapper around the command-line utility grep",
  "main": "grep.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.8.2",
    "equal-streams": "~0.0.1"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ladinu/node-grep.git"
  },
  "keywords": [
    "grep",
    "node grep",
    "grep wrapper",
    "grep streams"
  ],
  "author": {
    "name": "Ladinu Chandrasinghe",
    "email": "ladinu@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "[1]: http://example.com\n[2]: https://github.com/mikeal/request\n[3]: http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\n[4]: http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback\n# Grep\n\nThis is a simple wrapper around `grep(1)`. The module use `child_process` to create\n`grep` processes and use streams and callbacks to communicate.\n\n## Install\nUsing npm:\n```sh\n$ npm install grep1\n```\nFrom source:\n```sh\n$ git clone https://github.com/ladinu/node-grep.git\n$ cd node-grep\n$ npm link\n```\n\n## Examples\n\nGrep file `/tmp/file` for expression *spurs*:\n```javascript\nvar grep = require('grep1');\n\ngrep(['spurs', '/tmp/file'], function(err, stdout, stderr) {\n  if (err || stderr) {\n    console.log(err, stderr);\n  } else {\n    console.log(stdout);\n  }\n});\n```\n\nGrep file `/tmp/file` for expression *spurs*:\n```javascript\nvar search = grep(['spurs', '/tmp/file']);\n\nsearch.pipe(process.stdout);\n\nsearch.on('error', function(err) {\n  console.log(err);\n});\n```\n\nUsing [request][2], grep [example.com][1] for expression *examples*\n```javascript\nvar req    = require('request');\nvar search = grep('examples');\n\nsearch.pipe(process.stdout);\nreq('http://example.com').pipe(search);\n```\n\n## API\n\n### Class: Grep\n\nThis class wrap `grep(1)` using node's `child_process` module. When a callback is given\n`child_process.execFile()` is used and returns a `Grep` object which is a destroyed stream.\nWhen no callback, `child_process.spawn()` is used and returns a `Grep` object which is a\nstream.\n\n\n#### Event: 'error'\n\nProcess's `stderr` is emitted as `error` events.\n\n#### Event: 'data'\n\nProcess's `stdout` is emitted as `data` events.\n\n### grep([args], [options], callback)\n \n  * `args` The arguments given to `grep(1)` processes. By default `args` is concatinated\n    with an empty array and passed to `grep(1)` process. See `options` to change this\n    behaviour.\n  \n  * `options` *Object* for `Grep` object. Note \n\n    * `buildArgs` *Function* that build arguments for `grep(1)` processes. By default this is\n      set to a function that concatinate given `args` to an empty array.  So when you call \n      `grep(\"some_phrase\")` the actual arguments given to `grep(1)` process is \n      `[ 'some_phrase' ]`.\n\n    * `execOptions` *Object* that give options such as `cwd` to each `grep(1)` process. By\n      default this is an empty object. This is the same `options` object that you would use\n      when calling `child_process.execFile()` or `child_process.spawn()`. Because a callback\n      is given, `child_process.execFile()` is used. See node [documentation][4] for more \n      information.\n\n\n  * `callback` *Function* that is called when `grep(1)` process terminate\n    * `error` *Error*\n    * `stdout` *Buffer*\n    * `stderr` *Buffer*\n\n  * Returns a `Grep` object\n\n### grep([args], [options])\n\n  * `args` Same as `grep([args], [options], callback)`\n\n  * `options` Same as `grep([args], [options], callback)` except `child_process.spawn()`\n    is used. See node [documentation][3] for more infromation\n\n  * Returns a `Grep` object\n\n\n\n### grep.configure([options])\n\nThis will make `options` global when `options` is not given to `grep([args], [options])`\nor `grep([args], [options], callback)`\n\n  * Returns: nothing\n\nFor example:\n```javascript\nvar grep = require('grep1');\n\n// Set buildArgs so grep(1) will count line numbers.\n// Set current working directory to '/var/log' and perform\n// grep operations on file 'some.log'\n//\n// When you call grep(\"phrase\"), a new grep(1) process will\n// be created with arguments ['-n', 'phrase', 'some.log']\n\nvar fs      = require('fs');\nwarningFile = fs.createWriteStream('./warnings.txt');\nerrorFile   = fs.createWriteStream('./errors.txt');\n\ngrep.configure({\n    buildArgs:    function(args) { return ['-n', args, 'some.log'] }\n  , execOptions:  {cwd: '/var/log'}\n});\n\nvar warning = grep('[+} Warning');\nvar errors  = grep('[!] Error');\n\nwarning.pipe(warningFile);\nerrors.pipe(errorFile);\n\n\n// Grep file '/tmp/foo.txt' for first occurance of 'bar'\n// Note: global options set above do not apply because we \n// are giving an an empty options object\n\nvar options = {};\nvar bar     = grep(['-m', '1', 'bar', '/tmp/foo.txt'], options);\nbar.pipe(process.stdout);\n```\n\n### grep.resetConfig()\n\nHelper method to clear global settings. This basically set `buildArgs` to `null` and\n`execOptions` to an empty object.\n\n\n## License\n\nCopyright (c) 2013 Ladinu Chandrasinghe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify,\nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be included in all copies\nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR\nTHE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "grep1@0.0.5",
  "dist": {
    "shasum": "8e185b8f063973e7c465c107938c86f52c34fb74",
    "tarball": "http://registry.npmjs.org/grep1/-/grep1-0.0.5.tgz"
  },
  "_from": "grep1@*",
  "_npmVersion": "1.2.15",
  "_npmUser": {
    "name": "ladinu",
    "email": "ladinu@gmail.com"
  },
  "maintainers": [
    {
      "name": "ladinu",
      "email": "ladinu@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "8e185b8f063973e7c465c107938c86f52c34fb74",
  "_resolved": "https://registry.npmjs.org/grep1/-/grep1-0.0.5.tgz"
}
